<html>
  <head>
    <script src="/rtl/jquery.js"></script>
    <script>
       $(function() {
           var s;
           var len=0;
           function print(txt) {
               $("#console").append(txt+"\n");
               window.scrollTo(0, document.body.scrollHeight);
               len = len + txt.length;
               if(len > 100*1024) {
                   $("#console").append("\nTerminating WebSocket connection!\n");
                   s.close();
               }
           };
           var host = "<?lsp=response:encoderedirecturl(request:url(),true):gsub("^http","ws")?>";
           try { s = new WebSocket(host); } catch(e) {}
           if( ! s ) {
               print("WebSocket not supported");
               return;
           }
           s.onopen = function() {
               print("WebSocket connected. Waiting for Shodan response.");
           };
           s.onmessage = function (e) {
               if(e.data instanceof Blob) {
                   var f = new FileReader();
                   f.onload = function(e) { print(e.target.result) };
                   f.readAsText(e.data);                   
               }
               else {
                   print(e.data);
               }
           };
       });
    </script>
  </head>
  <body>
  <pre id="console"></pre>
  </body>
</html>
<?lsp

--   ***********     Server side Lua code:   **************

local key="LCECSFJG9az4SLw6T5O7ejcZ2lzTrqIB"
local url="https://api.shodan.io/shodan/host/search"
local mqttT={} -- List of all MQTT clients
local ws -- WebSocket

 -- The MQTT publish callback function redirects data to the WebSocket
 -- connection -- i.e. redirects data to the browser.
local function onpub(info, msg)
   local ok,err = ws:write(info, true)
   if not ws:write(info,true) or (#msg > 0 and not ws:write(msg)) then
      for _,mqtt in pairs(mqttT) do mqtt:disconnect() end
   end
end

 -- This function connects to one MQTT client
local function startMQTT(ip, info)
   ba.socket.event(function()
      local mqtt,err=require"mqttc".connect(ip, function(topic,msg)
         onpub(string.format("%s: %s: %s",info,ip,topic), msg) end)
      if mqtt then
         table.insert(mqttT, mqtt)
         mqtt:subscribe("#") -- Subscribe to all messages exchanged via the broker
         mqtt:run()
      end
   end)
end
if request:header"Sec-WebSocket-Key" then -- If a WebSocket request
   ws = ba.socket.req2sock(request) -- Upgrade to a WebSocket connection
   if ws then
      -- Create an HTTP object and send an MQTT query to Shodan
      local http = require"httpm".create{shark=ba.sharkclient()}
      http:timeout(60*1000) -- Shodan can be slow
      local rsp,err = http:json(url, {key=key,query="mqtt"})
      if rsp and rsp.matches then -- If JSON response OK
         ws:event(function() while ws:read() do end end, "s")
         for k,v in ipairs(rsp.matches) do
            startMQTT(v.ip_str,v.org)
         end
         return -- OK
      end
      ws:write("Shodan response err: "..(err or "unknown"))
   end
   return -- Done
end
response:setheader("x-xss-protection","1; mode=block")
response:setheader("content-security-policy",
"default-src 'self'; connect-src http: https: ws: wss:; script-src 'self' 'unsafe-inline'")
response:setheader("x-frame-options","SAMEORIGIN")
response:setheader("x-content-type","nosniff")
?>
