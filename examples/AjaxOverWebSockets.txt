<?lsp --------------  START SERVER CODE -------------
-- Basic math lib for adding and subtracting.
local math={}
function math.add(a,b) return a + b end
function math.subtract(a,b) return a - b end

-- The AJAX API we expose to the client
local rpc={
   math=math,
   os=os -- Lua 'os' lib: https://realtimelogic.com/ba/doc/luaref_index.html?url=manual.html#6.9
}

-- Socket intro: https://realtimelogic.com/ba/doc/?url=SockLib.html

-- AJAX WebSocket server side service
local function service(sock)
   while true do -- Loop and parse AJAX requests
      local req=sock:read() -- Wait for next AJAX request
      if not req then break end -- Socket closed
      req=ba.json.decode(req) -- Convert JSON to Lua object
      local func -- The function requested by the client
      pcall(function() -- try/catch equiv.
         -- The REST string req.service is in form "obj/subobj/func"
         -- Iterate object hierarchy until we find the function 
         local x=rpc -- root
         for n in req.service:gmatch"(%w+)/?" do x = x[n] end
         if type(x) == "function" then func=x end
      end)
      if func then -- We found the requested function
         -- Call requested (AJAX) function in protected mode.
         -- Unpack and pass in all arguments
         local ok,rsp,err=pcall(func,table.unpack(req.args))
         if not ok then err=rsp rsp=nil end -- if code crashed
         -- Send AJAX response
         sock:write(ba.json.encode{rpcID=req.rpcID,rsp=rsp,err=err},true)
      elseif req and req.rpcID then
         -- Service not found, send 404
         sock:write(ba.json.encode{rpcID=req.rpcID,err=404}, true)
      else
         break -- Invalid data. Close socket.
      end
   end
end

-- Convert WebSocket HTTP request to WebSocket (WS) and
-- activate the AJAX service function as a cosocket.
if request:header"Sec-WebSocket-Key" then
   local s = ba.socket.req2sock(request)
   if s then
      s:event(service,"s")
   end
   return
end
--------------  END SERVER CODE -------------
?>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"/>
  <script src="/rtl/jquery.js"></script>
<script>

/* Create the required full WebSocket URL from a path component
*/
function wsURL(path) {
    var l = window.location;
    if(path == undefined) path = l.pathname;
    return ((l.protocol === "https:") ? "wss://" : "ws://") +
        l.hostname +
        (l.port!=80 && l.port!=443 && l.port.length!=0 ? ":" + l.port : "") +
        path;
};


/* AJAX service factory function (the AJAX client library).  
   createAjax Args:
     service: the URI (relative path) to the AJAX WebSocket server resource
     onopen: A callback that is called when the AJAX library is ready
     onclose: A callback that is called should the WebSocket connection go down.
  Note: A new AJAX client library must be created should the socket
  connection go down.

   This function connects to the server using WebSocket and returns
   the AJAX function:
     ajax(REST-URI, ...args)
       callback: the callback function that is called when an AJAX
                 response is received. The callback receives two
                 arguments, the response data and an error code. The
                 response data is null on error and the error code is
                 set.
      REST-URI: the server side service to call, example: 'math/add'
      ...args: the arguments sent to the server side service, if any.

     The ajax function returns a JS Promise:
     https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
*/
function createAjax(service,onopen,onclose) {
   //Original code used the 'service' (URL) argument. We ignore this argument.
   var sock = new WebSocket(wsURL("/examples/manage.lsp")+ // Use example engine
     "?execute=true&type=lsp&ex=<?lsp=request:data('ex')?>" //Example engine requires this
   );
   sock.onopen=onopen;
   sock.onclose=onclose;
   var callbacks={} // saved ajax callbacks: key=id, val=function
   /* WebSocket data received from server. Convert the JSON response to
      an object, find the AJAX callback, and call the callback.
   */
   sock.onmessage = function(e) {
       var resp=JSON.parse(e.data); // Convert the JSON response to an object
       var promise=callbacks[resp.rpcID]; // Find the two promise callbacks
       delete callbacks[resp.rpcID]; // Release
       if(resp.rsp != null) promise.resolve(resp.rsp);
       else promise.reject(resp.err);
   };
   // Return function used for sending AJAX requests.
   return function(service, ...args) {
       //Create and return a new Promise
       return new Promise(function(resolve, reject) {
            var rpcID; // Find a unique ID
            do {
               rpcID=Math.floor(Math.random() * 100000);
            } while(callbacks[rpcID]); // while collisions
             // Save promise callbacks: rpcID is the key.
            callbacks[rpcID]={resolve:resolve,reject:reject};
            // Convert to JSON and send data to server.
            sock.send(JSON.stringify({rpcID:rpcID,service:service,args:args}));
         });
   };
}; // End 'createAjax': 22 lines of code :-)


// We use JQuery for interacting with the HTML
$(function() {

    // Disable/enable all HTML input elements
    function disableInputs(disable) {
        $("input").prop('disabled', disable);
    };
    disableInputs(true); //Initially disabled, then enabled when WebSocket is up

    // Create the AJAX client instance
    var ajax=createAjax('/service.lsp', // The server side WebSocket service
                        function() { disableInputs(false); }, // WS Up
                        function() { disableInputs(true); } // WS Down
                       );

    /* This function is called via the two functions below when the
       'add' or 'subtract' button is clicked: Extract a and b from
       HTML input elements and call the AJAX service.
    */
    function math(serviceFunc,button) {
        $("#err").html(""); // Erase errors, if any
        // Extract the two values from the two input elems.
        var list=$(button).parent().parent().children();
        var a = list.eq(0).find('input').val(); //First input
        var b = list.eq(2).find('input').val(); // Second input
        // Call server function "math/[add|subtract]"
        ajax("math/"+serviceFunc, a, b).
            then(function(rsp) { list.find("h2").html(rsp+""); }).
            catch(function(err) { $("#err").html(err); });
    };

    $("#addBut").click(function() { math("add",this); });

    $("#subBut").click(function() { math("subtract",this); });

    $("#timeBut").click(function() {
        /* Call the Lua function os.date with arg "*t".
           Function os.date returns an object with time values.
           This example shows how a complex data object may be sent.
        */
        ajax("os/date", "*t").
            then(function(rsp) {
                var html="";
                // The response is an object
                for (var key in rsp) {
                    html += key + " : " + rsp[key] + "\n";
                }
                $("#time").html(html);
            }).
            catch(function(err) { $("#err").html(err); } );
    });
});
</script>
</head>
<body>
  <div class="container">
    <div class="row">
      Ajax over WebSockets:
    </div>
    <div class="row">
        <div class="col"><input></input></div>
        <div class="col-1"><h3>+</h3></div>
        <div class="col"><input></input></div>
        <div class="col"><input style="width:100%" id="addBut" type="button" value="Calc"></input></div>
        <div class="col"><h2></h2></div>
    </div>
    <div class="row">
        <div class="col"><input/></div>
        <div class="col-1"><h3>-</h3></div>
        <div class="col"><input/></div>
        <div class="col"><input style="width:100%" id="subBut" type="button" value="Calc"></input></div>
        <div class="col"><h2></h2></div>
    </div>
    <div class="row"><p id="err" class="alert-danger"></p></div>
    <div class="row">
      <div style="margin-right:20px">
        <input id="timeBut" type="button" value="Get Time"/>
      </div>
      <div class="alert-success"><pre id="time"></pre></div>
    </div>
  </div>
</body>
</html>
